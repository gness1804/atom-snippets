# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.coffee': # for this CSON language
  'Snippet (short version)': # to create a short version of a snippet, without the language part at the top
    'prefix': 'Snippet (short version)'
    'body': """
      '$1':
        'prefix': '$1'
        'body': $2
    """

##########################

'.text.html.basic': # for HTML documents
  'canvas_expanded': # expanded version of the "canvas" snippet that includes a script link to canvas script file
    'prefix': 'canvas_expanded'
    'body': """
      <canvas id="canvas" width="300" height="300"></canvas>
      <script src="canvas.js"></script>
    """
  'CSS .css file': # to create a new link to my .css file
    'prefix': 'CSS .css file'
    'body': """
      <link rel="stylesheet" style="text/css" href="$1.css"/>
    """
  'data-role': # for the "data-role" attribute in jQuery Mobile
    'prefix': 'data-role'
    'body': 'data-role="$1"'
  'dropdown_slidedown': # to create menu items that use a dropdown menu managed in jQuery
    'prefix': 'dropdown_slidedown'
    'body': """
      <ul>
        <div class="dropdown_container">
          <li>The Most Important Links</li>
            <div class="dropdown_menu">
              <a href="">Item 1</a>
              <a href="">Item 2</a>
            </div>
        </div>
        <div class="dropdown_container">
          <li>Related Links</li>
            <div class="dropdown_menu">
              <a href="">Item 1</a>
              <a href="">Item 2</a>
          </div>
        </div>
        <div class="dropdown_container">
          <li>Yet More Links</li>
            <div class="dropdown_menu">
              <a href="">Item 1</a>
              <a href="">Item 2</a>
            </div>
        </div>
      </ul>
    """
  'enzyme-test-basics':
    'prefix': 'enzyme-test-basics'
    'body': """
      var expect = require('chai').expect;
      const React = require('react');
      const App   = require('../lib/components/App');
      //require in other files as needed
      require('locus');
      import {shallow, mount, render} from 'enzyme';
    """
  'favicon2': # to add a favicon to the page
    'prefix': 'favicon2'
    'body': '<link rel="icon" href="favicon.ico" type="image/x-icon">'
  'grahamnessler.com': # to link to my website
    'prefix': 'grahamnessler.com'
    'body': 'http://www.grahamnessler.com'
  'href': # href with space for link and opens in new window
    'prefix': 'href'
    'body': 'href="$1" target="_blank"'
  'html_expanded': # an expanded HTML skeleton
    'prefix': 'html_expanded'
    'body': """
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width"/>
          <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
          <link rel="stylesheet" style="text/css" href="
          https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css"/>
          <!-- <link rel="stylesheet" style="text/css" href="styles.css"/> -->
          <title></title>
        </head>
        <body>

        <script src="scripts.js"></script>
        </body>
      </html>
    """
  'JavaScript .js file': # to create a new link to my .js file
    'prefix': 'JavaScript .js file'
    'body': """
      <script src="$1.js"></script>
    """
  'jQuery mobile': #CDN requirements to use jQuery Mobile
    'prefix': 'jquery mobile'
    'body': """
      <!-- Include meta tag to ensure proper rendering and touch zooming -->
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <!-- Include jQuery Mobile stylesheets -->
      <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css">
      <!-- Include the jQuery library -->
      <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
      <!-- Include the jQuery Mobile library -->
      <script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
    """
  'jQuery vanilla': # the CDN for vanilla jQuery
    'prefix': 'jQuery vanilla'
    'body': """
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    """
  'legal_personalized': # personalized version of the boilerplate legal notice
    'prefix': 'legal_personalized'
    'body': 'Copyright (c) 2016 Graham Nessler. All Rights Reserved.'
  'media_query': # meta tag to enable media query
    'prefix': 'media_query'
    'body': """
      <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=true;">
    """
  'normalize': # for normalize.css
    'prefix': 'normalize'
    'body': """
      <link rel="stylesheet" style="text/css" href="
      https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css"/>
    """
  'nosearch': # to keep the page from showing up in search engine results
    'prefix': 'nosearch'
    'body': '<meta name="robots" content="noindex"/>'
  'option': # option contain for dropdown menu
    'prefix': 'option'
    'body': '<option>$1</option>'
  'p5.js': # link to enable p5.js
    'prefix': 'p5.js'
    'body': """
      <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.3/p5.js"></script>
    """
  'radio': # radio button
    'prefix': 'radio'
    'body': """
      <input type="radio" name="name" value="value" id="$1">
      <label for="$1">Label Name</label>
    """
  'reset': # to insert reset.css link
    'prefix': 'reset'
    'body': """
      <link rel="stylesheet" style="text/css" href="reset.css"/>
    """
    'tab-index': # tab-index 0 for accessibility
      'prefix': 'tab-index'
      'body': 'tabindex="0"'

##########################

'.source.js': # for JavaScript documents
  'addEventListener': # for JS addEventListener
    'prefix': 'addEventListener'
    'body': """
      addEventListener('event', function () {

        });
    """
  'alert': # the JS "alert" function
    'prefix': 'alert'
    'body': 'alert("$1");'
  'animate': # the jQuery "animate()" method
    'prefix': 'animate'
    'body': """
      animate({cssProp: "value", cssProp: "value"}, speed, callbackFxn); // be sure to give the targeted element the position relative, absolute, or fixed
    """
  'array-of-numbers': # to create a blank array with spaces for numbers
    'prefix': 'array-of-numbers'
    'body': '[$1,,,,];'
  'array-of-text': # to create a new blank array w blank text lines
    'prefix': 'array-of-text'
    'body': '["$1", "", "", "", ""];'
  'arrow-function': # arrow function for es6
    'prefix': 'arrow-function'
    'body': """
      ($1) => {
        $2
      }
    """
  'assert.strictEqual':
    'prefix': 'assert.strictEqual'
    'body': """
      assert.strictEqual("dogs", "cats");
    """
  'attr_simple': # for the jQuery .attr() method (simple form)
    'prefix': 'attr_simple'
    'body': 'attr("attribute", "attributeValue");'
  'attr_complex': # for the jQuery .attr() method (complex form)
    'prefix': 'attr_complex'
    'body': """
      attr({
        "attribute" : "attributeValue",
        "attribute" : "attributeValue"
    });
    """
  'bezier_curve': # to draw a bezier curve
    'prefix': 'bezier_curve'
    'body': """
      draw$1.beginPath();
      draw.moveTo(xstart, ystart); //starting point of bezier curve
      draw.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, xend, yend);
      draw.stroke();
      draw.closePath();
    """
  'border-test': # border test for jQuery
    'prefix': 'border-test'
    'body': """
      $(document).on("keydown", function(key) {
        if (key.which === 66) { // "B"
          $(".testing").toggleClass("border-test");
          }
        });
    """
  'canvas_2d_base_script': # base script to set up a 2d canvas drawing
    'prefix': 'canvas_2d_base_script'
    'body': """
      var canvas$1 = document.getElementById("canvas");
      var draw = canvas.getContext("2d");
    """
  'circle_in_canvas': # to create a circle in canvas
    'prefix': 'circle_in_canvas'
    'body': """
      draw$1.beginPath();
      draw.arc(xcenter, ycenter, r, 0, 2*Math.PI);
      draw.strokeStyle = "//color or style";
      draw.fillStyle = "//color or style";
      draw.fill(); //or "draw.stroke()" for an unfilled circle
      draw.closePath(); //needed if not using "fill()"
    """
  'constructor': # to create a new blank constructor function
    'prefix': 'constructor'
    'body': """
      function Name (arg1, arg2) {
        this.property = "value(text)";
        this.property = "value(text)";
        this.property = "value(text)";
        this.property = value(number);
        this.property = "value(text)";
        this.arg1 = arg1;
        this.arg2 = arg2;
      };
    """
  '.css': # jQuery's .css()
    'prefix': '.css'
    'body': """
      css({
        cssProperty: 'value',
        cssProperty: 'value'
        });
    """
  'describe': # "describe" for tests
    'prefix': 'describe'
    'body': """
      describe("$1", ()=>{
        it("should $2", ()=>{
          $3
          assert.strictEqual("dogs", "cats");
        });
      });
    """
  'dropdown_slidedown': # to manage the dropdown menus for the above HTML
    'prefix': 'dropdown_slidedown'
    'body': """
     $(".dropdown_menu").hide();

     $(".dropdown_container").hover(function (){
        $(this).children().fadeIn(500);
     });

     $(".dropdown_container").mouseleave(()=>{
        $(".dropdown_menu").fadeOut(500);
     });
    """
  'ellipse': # ellipse for p5js
    'prefix': 'ellipse'
    'body': """
      ellipse(xstart, ystart, width, height);
    """
  'es6 constant':
    'prefix':'es6Const'
    'body':'${1:/* replace var with let to declare a variable, but limit the variable’s\n\tscope to only the current code block */}\nconst ${2:constName} = ${3:constValue};${4}'
  'es6 arrow function':
    'prefix':'es6ArrowFunction'
    'body':'/* Arrows are a function shorthand using the => syntax. Unlike functions,\n\tarrows share the same lexical this as their surrounding code. If an arrow\n\tis inside another function, it shares the “arguments” variable of its\n\tparent function. Arrow functions are commonly used for iteration methods */\n\n// Arrow functions also include an implicit .bind(this)\n// In these examples the => is relacing the callback function()\n// Note that \' () => \' is an anonymous arrow function\n\n// Expression bodies\n\tvar odds = evens.map(v => v + 1);\n\tvar nums = evens.map((v, i) => v + i);\n\n// Statement bodies\n\tnums.forEach(v => {\n\tif (v % 5 === 0)\n\t\tfives.push(v);\n\t});'
  'es6 class':
    'prefix':'es6Class'
    'body':'${1:/* ES2015 classes are a simple sugar over the prototype-based OO pattern.\n\tHaving a single convenient declarative form makes class patterns easier\n\tto use, and encourages interoperability. Classes support prototype-based\n\tinheritance, super calls, instance and static methods and constructors. */}\n\n${2:var} ${3:Polygon} = class ${3:Polygon} {\n\tconstructor(${4:arg1}, ${5:ar2}) {\n\t\tthis.${4:arg1} = ${4:arg1};\n\t\tthis.${5:ar2} = ${5:ar2};${6}\n\t}\n};${7}'
  'es6 class in depth':
    'prefix':'es6ClassInDepth'
    'body':'/* ES2015 classes are a simple sugar over the prototype-based OO pattern.\n\tHaving a single convenient declarative form makes class patterns easier\n\tto use, and encourages interoperability. Classes support prototype-based\n\tinheritance, super calls, instance and static methods and constructors. */\n\n//new Polygon(20,10)\n//anything that is not part of the constuctor is a prototype method\n//note that you don\'t have to do \'movePolygon = function()\' this is also true for ES6 object literals\nclass Polygon {\n\tconstructor(height, width) {\n\t\tthis.height = height\n\t\tthis.width = width\n\t}\n\tping() {\n\t\tconsole.log(\'ping\')\n\t\t// this is a prototype method\n\t}\n}\n\n// new HyperPolygon({width:10, height:20})\n// you can also use ES6 parameter deconstruction and short circuits in class constructors\n// note that you no longer need to worry about the order of arguments\n// note that both kinds of short circuits work, but the argument default trumps the constructor default. Think about how you can use this to your advantage.\nclass HyperPolygon {\n\tconstructor({height, width, color=\'green\', shape=\'polygon\'}) {\n\t\tthis.height = height\n\t\tthis.width = width\n\t\tthis.shape = shape\n\t\tthis.color = color || \'blue\'\n\t}\n\t一growPolygon(num) { // \'一\' is a japaneese symbol that forces methods to the bottom of an object.\n\t\tthis.height *= num\n\t\tthis.width *= num\n\t}\n}\n\n\n//new Square(20)\nclass Square extends Polygon {\n\tconstructor(length) {\n\t\t//this.height; // ReferenceError, super needs to be called first!\n\t\t\n\t\t// Here, it calls the parent class\' constructor with lengths\n\t\t// provided for the Polygon\'s width and height\n\t\tsuper(length, length);\n\t\t\n\t\t// Note: In derived classes, super() must be called before you\n\t\t// can use \'this\'. Leaving this out will cause a reference error.\n\t\tthis.name = \'Square\';\n\t}\n\n\tget area() {\n\t\treturn this.height * this.width;\n\t}\n\n\tset area(value) {\n\t\tthis.area = value;\n\t} \n}\n\n\n// and now for the Hyper example\n//new HyperSquare({color:\'gray\', length:\'5\'})\nclass HyperSquare extends HyperPolygon {\n\tconstructor({length, color=\'green\', shape=\'polygon\'}) {\n\t\tsuper({width:length, height:length, color:color})\n\t\tthis.name = \'HyperSquare\'\n\t}\n\t一announce() {\n\t\tconsole.log(\'I am HyperSquare, fighter of all things oblong!!!\')\n\t}\n}'
  'es6 object literals':
    'prefix':'es6ObjectLiteral'
    'body':'${1:/* Object literals are extended to support setting the prototype at\n\tconstruction, shorthand for foo: foo assignments, defining methods\n\tand making super calls. Together, these also bring object literals\n\tand class declarations closer together, and let object-based design\n\tbenefit from some of the same conveniences. */}\n\n${2:var} ${3:obj} = {\n\t\t${4:// Sets the prototype. "__proto__" or \'__proto__\' would also work.}\n\t\t${5:__proto__:} ${6:theProtoObj},\n\t\t${7:// Computed property name does not set prototype or trigger early error for\n\t\t// duplicate __proto__ properties.}\n\t\t${8:[\'__proto__\']}: ${9:somethingElse,}\n\t\t${10:// Shorthand for ‘handler: handler’}\n\t\t${11:handler},\n\t\t${12:// Methods}\n\t\t${13:toString() {\n\t\t${14:// Super calls}\n\t\t${15:return "d " + super.toString();}\n\t\t\\},}\n\t\t${16:// Computed (dynamic) property names}\n\t\t${17:[ "prop_" + (() => 42)() ]: 42}\n};${18}'
  'es6 parameter deconstruction':
    'prefix':'es6ParameterDeconstruction'
    'body':'${1:// Object deconstruction can be used to make function parameters more efficient\n// Note that with \'name\' the object property assignment is missing\n// In this instance ES6 assumes we mean name: name\n// the \'=\' included with bloodType is a default value\n// note that using a parameter object does not care what order you pass in arguments\n\nfunction logInfo({gender: gender, name, bloodType = \'Unknown\'\\}) {\n\tconsole.log(`Name: \\${name\\}`);\n\tconsole.log(`Gender: \\${gender\\}`)\n\tconsole.log(`BloodType: \\${bloodType\\}`);\n\n\t//boodType on the line below is an example of object matching; the reverse of deconstruction\n\treturn {patientName:name, patientGender:gender, bloodType\\}\n\\}\n\n// logInfo({name: \'Bob\', gender: \'Male\'\\})\n\t// logs\n\t\t// "Name: Bob"\n\t\t// "Gender: Male"\n\t\t// "BloodType: unknown"\n\n\t//returns\n\t\t// Object {\n\t\t//\t bloodType: "Unknown",\n\t\t//\t patientGender: "Male",\n\t\t//\t patientName: "Bob"\n\t\t// \\}\n}${2}\n'
  'es6 list matching':
    'prefix':'es6ListMatching'
    'body':'// list matching assigns variables in bulk\n// vars that do not match the index of the assignment array will "fail-soft" to undefined\n// default values can be assigned using the \'=\' as with d below\n\nfunction assignVarsFromArray() {\n\tvar [a, ,b,c,d = 7] = [1,2,3]\n\tconsole.log(`a: ${a}`)\n\tconsole.log(`b: ${b}`)\n\tconsole.log(`c: ${c}`)\n\tconsole.log(`d: ${d}`)\n\treturn [d,c,b,a]\n}\n\n// logs:\n\t// "a: 1"\n\t// "b: 3"\n\t// "c: undefined"\n\t// "d: 7"\n\n// returns:\n\t// [7, undefined, 3, 1]'
  'es6 spread and rest':
    'prefix':'es6SpreadRest'
    'body':'// the \' ... \' below is being used as \'rest\'\n// this will take all of the \'rest\' of the parameters passed and push them into array y\n\nfunction restArguments(x, ...y) {\n\t// y is an Array\n\tconsole.log(y)\n\tconsole.log(`y[1] === ${y[1]}`)\n\treturn x * y.length;\n}\n// restArguments(3, "hello", true, undefined)\n\n// logs\n\t// ["hello", true, undefined]\n\t// "y[1] === true"\n\n// returns\n\t// 9\n\n\n// here the \' ... \' is used in the function call as a \'spread\'\n// this takes the array passed in and \'spreads\' them into the corresponding arguments\nfunction g(x, y, z) {\n\tconsole.log(`x === ${x}`)\n\tconsole.log(`y === ${y}`)\n\tconsole.log(`z === ${z}`)\n\treturn [z,y,x];\n}\n// g(...[1,2,3])\n\n// logs\n\t// "x === 1"\n\t// "y === 2"\n\t// "z === 3"\n\n// returns\n\t// [3, 2, 1]'
  'es6 iteration object':
    'prefix':'es6Iteration'
    'body':'/* Iteration functions (functions that call on some other instance on n)\n\tare easy to create in ES6. The code below creates an array of fibonacci\n\tnumbers. Note that the\t\'if (n > 1000)\' is preventing an infinite loop.\n\n\tNOTE: as of the writing of this snippet your will need babel polyfill\n\t\t\t\tto use the iterator object.\n\t */\n\nlet fibonacci = {\n\t[Symbol.iterator]() {\n\t\tlet pre = 0, cur = 1\n\t\treturn {\n\t\t\tnext () {\n\t\t\t\t[ pre, cur ] = [ cur, pre + cur ] // es6ListMatching\n\t\t\t\treturn { done: false, value: cur }\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getFibArr() {\n\tlet fibArr = []\n\tfor (let n of fibonacci) {\n\tif (n > 1000) {\n\t\tbreak\n\t}\n\tfibArr.push(n)\n\t}\n\tconsole.log(fibArr)\n}\n'
  'es6 array.includes':
    'prefix':'es6ArrayIncludes'
    'body':'function check() {\n\tconsole.log("abcde".includes("cd")) //true\n\t\n\tlet arr = [\'beans\', \'broth\', \'meat\', \'e-coli\']\n\tconsole.log(arr.includes(\'e-coli\')) //true\n\t\n\t// some extra examples with && ||\n\tconsole.log(arr.includes(\'e-coli\' && \'ebola\')) //false\n\tconsole.log(arr.includes(\'e-coli\' && \'meat\')) //true\n\tconsole.log(arr.includes(\'e-coli\' || \'ebola\')) //true\n\tconsole.log(arr.includes(\'e-coli\' && \'ebola\' || \'meat\')) //false - not what you want\n\tconsole.log(arr.includes((\'e-coli\' && \'ebola\') || \'meat\')) //false - not what you want\n\tconsole.log(arr.includes(\'e-coli\' && \'ebola\') || arr.includes(\'meat\')) //true - what you want\n\tconsole.log(arr.includes(\'e-coli\' && \'meat\') && arr.includes(\'meat\' || \'burritos\')) //true - what you want\n\t\n\t// *this snippet sponsored by chipote-la-way\n}'
  'es6 if syntax':
    'prefix':'es6IfSyntax'
    'body':'let arr = [1,2,3,4,5,6]\n\n// traditional syntax requires {} with code blocks like if\nfunction returnEvens(arr) {\n\tlet evens = []\n\tarr.forEach(function(num) {\n\tif (num % 2 === 0) {\n\t\tevens.push(num)\n\t}\n\t})\n\tconsole.log(evens)\n}\n\n\nfunction returnOdds(arr) {\n\tlet odds = []\n\tarr.forEach(function(num) {\n\tif (num % 2) { // this works because 0 is a falsy value\n\t\todds.push(num)\n\t}\n\t})\n\tconsole.log(odds)\n}\n\n\n// in ES6 {} for if statments is not required\nfunction returnEvens(arr) {\n\tlet evens = []\n\tarr.forEach(function(num) {\n\tif (num % 2 === 0)\n\t\tevens.push(num)\n\t})\n\tconsole.log(evens)\n}\n\n\nfunction returnOdds(arr) {\n\tlet odds = []\n\tarr.forEach(function(num) {\n\tif (num % 2) // this works because 0 is a falsy value\n\t\todds.push(num)\n\t})\n\tconsole.log(odds)\n}\n\n//even further refactored with ES6\nfunction returnEvens(arr, events=[]) {\n\tarr.forEach(num => {\n\tif (num % 2 === 0) evens.push(num)\n\t})\n\tconsole.log(evens)\n}\n\n//this makes for a very nice looking syntax\nfunction returnEvensAndOdds(arr, evens=[], odds=[]) {\n\tarr.forEach(num => {\n\tif (num % 2) odds.push(num)\n\telse evens.push(num)\n\t})\n\tconsole.log(odds)\n\tconsole.log(evens)\n}\n\n// //Note that the code below has a syntax error. If and else have to be on separate lines\n// //This is possible using a ternary operator, however.\n// function returnEvensAndOdds(arr, evens=[], odds=[]) {\n//\tarr.forEach(function(num) {if (num % 2) odds.push(num) else evens.push(num)})\n//\tconsole.log(odds)\n//\tconsole.log(evens)\n// }\n\n\n// further refactored using the ternary operator\nfunction returnEvensAndOdds(arr, evens=[], odds=[]) {\n\tarr.forEach(num => {\n\tnum % 2 ? odds.push(num) : evens.push(num)\n\t})\n\tconsole.log(odds)\n\tconsole.log(evens)\n}'
  'es6-disable-warnings': # to disable es6 warnings in es6. Need to create a file called .jshintrc in the root directory of my project
    'prefix': 'es6-disable-warnings'
    'body': """
      {
        "esversion": 6
      }
    """
  'forEach':
    'prefix': 'forEach'
    'body': """
      ${1:array}.forEach((${2:item})=>{
        $3
      });
    """
  'function2': # workaround to emulate the default "function" snippet
    'prefix': 'function2'
    'body': """
      function $1 ($2) {
        $3
      }
    """
  'get-ajax': # "get" in ajax with jQuery
    'prefix': 'get-ajax'
    'body': """
      $.get( "/whereToGetDataFrom", function( data ) {
        //do something with data
        });
    """
  'getElementById': # slight revised form for getElementById
    'prefix': 'getElementById'
    'body': 'getElementById("$1")'
  'image_in_canvas': # to insert an image into canvas
    'prefix': 'image_in_canvas'
    'body': """
      window.onload = function () {
        var $1imageName= document.getElementById("imageId");
        draw.drawImage(imageName, x, y);
      };
    """
  'import':
    'prefix': 'import'
    'body': 'import $1 from "./$1";'
  'items':
    'prefix': 'items'
    'body': """
      const items = {
        thingKey: thingValue
      };
    """
  'it-should': # the "it" function for testing
    'prefix': 'it-should'
    'body': """
      it("should $1", ()=>{
        $2
        assert.strictEqual("dogs", "cats");
      });
    """
  'jQuery-basic-skeleton': # the basic setup for jQuery
    'prefix': 'jQuery-basic-skeleton'
    'body': """
      $(document).ready(function () {
        $1
      });
    """
  'line_in_canvas': # to create a line in canvas
    'prefix': 'line_in_canvas'
    'body': """
      //draw.beginPath(); if starting a shape or to protect lines from other parts of the picture
      draw$1.moveTo(xstart, ystart);
      draw.lineTo(xend, yend); //repeat this as often as needed to draw shapes
      draw.strokeStyle = "//color or style of the line";
      draw.stroke(); //for simple lines
      //draw.fill(); if filling a shape; can also precede this with "draw.fillStyle = ''"
      //draw.closePath(); //unless drawfill() is used
    """
  'log2': # workaround to emulate the default "log" snippet
    'prefix': 'log2'
    'body': 'console.log($1)'
   'ls set item':
    'prefix':'lsSet'
    'body':'localStorage.setItem(\'${1:key}\',${2:value});${3}'
  'ls get item':
    'prefix':'lsGet'
    'body':'localStorage.getItem(\'${1:key}\');${2}'
  'ls set stringified':
    'prefix':'lsSetStringified'
    'body':'localStorage.setItem(\'${1:key}\', JSON.stringify(${2:value}));${3}'
  'ls get stringified':
    'prefix':'lsGetStringified'
    'body':'JSON.parse(localStorage.setItem(\'${1:key}\'));${2}'
  'ls clear':
    'prefix':'lsClear'
    'body':'localStorage.clear();${1}'
  'mobile_redirect': # redirects user to a mobile site if their screen is smaller than 500 px
    'prefix': 'mobile_redirect'
    'body': """
      function testWin() { //redirect to mobile site; in most cases, I should add this function name to an "onload" attribute in the HTML body
        var w = window.outerWidth;
        if (w < 500) {
          window.location.replace("$1.html");
        }
      };
    """
  'object_w_properties': # to create a blank object block with several property and value templates
    'prefix': 'object_w_properties'
    'body': """
      {
        property: "value(text)",
        property: "value(text)",
        property: value(number),
        property: "value(text)",
        property: "value(text)",
      };
    """
  'offset_return': # used to just return coordinates using "offset()", rather than set the coord.
    'prefix': 'offset_return'
    'body': 'offset().left|.top| '
  'offset_set_coord': # to assign new coordinates to top and/or left of object using "offset()"
    'prefix': 'offset_set_coord'
    'body': 'offset({top: 000, left: 000});'
  'on_mult_handlers': # a more complex template for the jQuery ".on" method featuring multiple event handlers
    'prefix': 'on_mult_handlers'
    'body': """
      on({
        event: function() {
          //function body for handler
        },
        event: function() {
          //function body for handler
        },
        event: function() {
          //function body for handler
        }
      });
    """
  'on_simplified': # a simplified template for the jQuery ".on" method
    'prefix': 'on_simplified'
    'body': """
      on("event1 event2", {optional data to pass to function}, function() {
        //function body
        });
    """
  'p5js_setup': # basic setup for p5js
    'prefix': 'p5js_setup'
    'body': """
    function setup() {
      createCanvas(windowWidth, windowHeight);
    }

    function draw() {

    }
    """
  'parseInt':
    'prefix': 'parseInt'
    'body': 'parseInt($1, 10)'
  'pinpoint': # to calculate the position of a point in a canvas object
    'prefix': 'pinpoint'
    'body': '(outputX - objFromLeft), (outputY - objFromTop)'
  'post-ajax': # an ajax post function with jQuery
    'prefix': 'post-ajax'
    'body': """
      $.post("/whereToPost", {key: value, key2: value2}).then(function (response) {
        //do something with response
      });
    """
  'prototype-refined':
    'prefix': 'prototype-refined'
    'body': """
      $1.prototype.${2:methodName} = function ($3) {
        $4
      };
    """
  'quadratic_curve': # to draw a quadratic curve
    'prefix': 'quadratic_curve'
    'body': """
      draw.beginPath();
      draw.moveTo(xstart, ystart); // the starting point of the curve
      draw.quadraticCurveTo(cpx, cpy, xend, yend);
      draw.stroke();
      draw.closePath();
    """
  'random-number-generator': # random number generator allowing one to set a min and max
    'prefix': 'random-number-generator'
    'body': """
      function random(min, max) {
        let min = min;
        let max = max;
        return Math.floor(Math.random() * (max - min) + min);
      }
    """
  'react-indexjs-setup': # my comments
    'prefix': 'react-indexjs-setup'
    'body': """
      import React from 'react';
      import { render } from 'react-dom';

      import Application from './components/Application.jsx';
      require('./styles.scss');

      render(<Application/>, document.getElementById('application'));
    """
  'rect': # rectangle in p5js
    'prefix': 'rect'
    'body': """
      rect(xstart, ystart, width, height);
    """
  'rectangle_in_canvas': # to create a rectangle in canvas
    'prefix': 'rectangle_in_canvas'
    'body': """
      draw$1.fillStyle = "//color or style that fills the rectangle";
      draw.fillRect(xstart, ystart, xwidth, yheight);
    """
  'setAttribute': # to set the attribute of an element
    'prefix': 'setAttribute'
    'body': """
      setAttribute("attribue", "value");
    """
  'setInterval': # for setInterval()
    'prefix': 'setInterval'
    'body': """
      setInterval(function () {
        //function body
      }, timer, param1, param2);
    """
  'setTimeout': # for setTimeout()
    'prefix': 'setTimeout'
    'body': """
      setTimeout(function() {}, timer, param1, param2);
    """
  'setup.js': # for setup.js file (testing in enzyme)
    'prefix': 'setup.js'
    'body': """
      require('babel-register')({
        presets: ["react", "es2015"]
      });

      require('babel-polyfill');

      //we need an instance of the document
      global.document = require('jsdom').jsdom(
        "<div id='application'></div><script src='main.bundle.js'></script></body></html>"
      );

      //and an instance of the window
      global.window = document.defaultView;
      global.navigator = window.navigator;

      //to allow local storage when testing
      if (!global.window.localStorage) {
        localStorage = {
          getItem() { return '{}'; },};
        }

      //to allow jquery
        if (typeof(exports) !== "undefined"){
          var $ = require('jquery');
        }
    """
  'sort': # sort function
    'prefix': 'sort'
    'body': """
      sort(function (a, b) {return a - b});
    """
  'splice': # splice method to add or remove stuff from arrays
    'prefix': 'splice'
    'body': """
      splice(indexPositionToStart, numberOfItemsToAddOrRemove, itemToAdd, itemToAdd);
    """
  'sumArrayItems': # to add up all the numbers in an array
    'prefix': 'sumArrayItems'
    'body': """
      array.reduce(function (a, b) {
        return a + b;
      }, 0);
    """
  'test':
    'prefix': 'test'
    'body': """
      console.log("test");
    """
  'text_in_canvas': # to create text in canvas
    'prefix': 'text_in_canvas'
    'body': """
      draw$1.font = "sizepx fontname";
      draw.fillStyle = "//color or style that fills the text, if wanted";
      draw.textAlign = "";
      draw.fillText("text", x, y); //can also use "draw.strokeText("text", x, y)" to create text without a fill
    """
  'ternary':
    'prefix': 'ternary'
    'body': 'thing ? ifThingIsTrueDoThis : ifThingIsFalseDoThis'
  'today': # insert the current date in a readable format
    'prefix': 'today'
    'body': 'new Date().toDateString()'
  'webpack-config-js': # to set up the webpack.config.js file
    'prefix': 'webpack-config-js'
    'body': """
      const path = require('path');

      module.exports = {
        entry: {
          main: "./lib/index.js",
          test: "mocha!./test/index.js"
          },
          output: {
            path: __dirname,
            filename: "[name].bundle.js"
            },
            module: {
              loaders: [
                { test: /\.js$/, exclude: '/node_modules/', loader: 'babel-loader' },
                { test: /\.css$/, loader: "style!css" },
                { test: /\.scss$/, loader: "style!css!sass" } //add \ before each file extension to avoid regex error
              ]
              },
              resolve: {
                extensions: ['', '.js', '.json', '.scss', '.css']
              }
            };
    """
  'wrapper':
    'prefix': 'wrapper'
    'body': """
      const wrapper = mount(<$1/>);
    """

####################################

'.source.json': # for JSON documents
  'webpack-package-json-dependencies': # my comments
    'prefix': 'webpack-package-json-dependencies'
    'body': """
      "devDependencies": {
        "babel": "^6.5.2",
        "babel-core": "^6.14.0",
        "babel-eslint": "^6.1.2",
        "babel-loader": "^6.2.5",
        "babel-polyfill": "^6.13.0",
        "babel-preset-es2015": "^6.14.0",
        "babel-preset-react": "^6.11.1",
        "babel-preset-stage-1": "^6.16.0",
        "babel-register": "^6.14.0",
        "chai": "^3.5.0",
        "css-loader": "^0.25.0",
        "enzyme": "^2.4.1",
        "escape-html": "^1.0.3",
        "eslint": "^3.9.1",
        "eslint-config-airbnb": "^11.2.0",
        "eslint-plugin-import": "^2.1.0",
        "eslint-plugin-jsx-a11y": "^2.2.3",
        "eslint-plugin-react": "^6.5.0",
        "firebase-tools": "^3.0.7",
        "jsdom": "^9.5.0",
        "mocha": "^3.0.2",
        "mocha-loader": "^1.0.0",
        "node-libs-browser": "^1.0.0",
        "node-sass": "^3.10.0",
        "sass-loader": "^4.0.2",
        "style-loader": "^0.13.1",
        "webpack": "^1.13.2",
        "webpack-dev-server": "^1.15.2"
      },
      "dependencies": {
        "firebase": "^3.4.0",
        "locus": "^1.2.0",
        "lodash": "^4.15.0",
        "moment": "^2.15.1",
        "sinon": "^1.17.6",
        "react": "^15.3.1",
        "react-addons-test-utils": "^15.3.1",
        "react-dom": "^15.3.1",
        "react-scroll": "^1.4.2",
        "underscore": "^1.8.3"
      }
    """
  'webpack-package-json-scripts':
    'prefix': 'webpack-package-json-scripts'
    'body': """
      "scripts": {
        "start": "webpack-dev-server --hot --inline",
        "build": "webpack",
        "test": "mocha", //add '--require test/helpers/setup.js' if running enzyme tests
        "sel": "java -jar selenium-server-standalone-2.53.0.jar",
        "feature": "wdio wdio.conf.js"
      },
    """

####################################

'.source.js.jsx': #### for react
  'arrow-function': # arrow function for es6
    'prefix': 'arrow-function'
    'body': """
      ($1)=>{$2}
    """
  'className':
    'prefix': 'className'
    'body': """
      className="$1"
    """
  'componentDidMount':
    'prefix': 'componentDidMount'
    'body': """
      componentDidMount(){
        $1
      }
    """
  'componentWillUnmount':
    'prefix': 'componentWillUnmount'
    'body': """
      componentWillUnmount() {
        this.serverRequest.abort();
      }
    """
  'export-default-class':
    'prefix': 'export-default-class'
    'body': """
      import React, { Component } from 'react';

      export default class $1 extends Component {
        constructor() {
          super();

        }

        render() {
          return(
            <div>Hi</div>
          );
        }

      } /

    """
  'function-prototype-method-in-react':
    'prefix': 'function-prototype-method-in-react'
    'body': """
      $1($2){
        $3
      }
    """
  'import-from-component-react':
    'prefix': 'import-from-component-react'
    'body': """
      import $1 from './$1';
    """
  'import-react-from-react':
    'prefix': 'import-react-from-react'
    'body': """
      import React, { Component } from 'react';
    """
  'items':
    'prefix': 'items'
    'body': """
      const items = {
        thingKey: thingValue
      };
    """
  'onChange':
    'prefix': 'onChange'
    'body': """
      onChange={${1:this.props.handleChange}}
    """
  'onClick':
    'prefix': 'onClick'
    'body': 'onClick={${1:this.props.handleClick}}'
  'parseInt':
    'prefix': 'parseInt'
    'body': 'parseInt($1, 10)'
  'proptypes-react':
    'prefix': 'proptypes-react'
    'body': """
      $1.propTypes = {
        $2: React.PropTypes.$3,
      }
    """
  'react-basic-constructor':
    'prefix':'react-basic-constructor'
    'body': """
      import React, {Component} from 'react';
      const ReactDOM = require('react-dom');

      class $1 extends Component {

        render() {
          return (
            <div>Hello! This is a test.</div>
          );
        }

      }


      export default $1;
    """
  'render-react':
    'prefix': 'render-react'
    'body': """
      render() {
        return(
          <div>Hi</div>
        );
      }
    """
  'setState':
    'prefix': 'setState'
    'body': """
      this.setState({${1:key}:${2:value}});
    """
  'test':
    'prefix': 'test'
    'body': """
      console.log("test");
    """
#####################################

'.source.css': # for CSS documents
  'auto_fit': # the trick to center an object on the page
    'prefix': 'auto_fit'
    'body': """
      display: block;
      margin-left: auto;
      margin-right: auto;
    """
  'border-box': # inserts border-box to control for margin and padding issues
    'prefix': 'border-box'
    'body': """
      html, body {
        box-sizing: border-box;
      }

      *,
      *:after,
      *:before {
        box-sizing: inherit;
      }
    """
  'border_standard': # standard border
    'prefix': 'border_standard'
    'body': 'border: 1px solid black;'
  'border_test': # temp border for testing purposes
    'prefix': 'border_test'
    'body': 'border: 1px dotted red; /* temp */'
  'center': # center the element on the page
    'prefix': 'center'
    'body': """
      margin: auto;
      width: $1;
    """
  'clearfix': # the clearfix
    'prefix': 'clearfix'
    'body': """
      .clearfix:after {
        content:" ";
        display:table;
        clear:both;
      }
    """
  'debug-sass':
    'prefix': 'debug-sass'
    'body': """
      $debug: false;

      $debug-border-style: 1px dotted red;
      $debug-background-color: magenta;

      @if ($debug) {

        section {
        border: $debug-border-style;
        }

      }
    """
  'giant_monitor': # media query for giant monitors
    'prefix': 'giant_monitor'
    'body': """
      @media screen and (min-width: 1500px) { /* for giant monitors */
        element1 {}
        element2 {}
      }
    """
  'keyframes_percentages': # expanded version of default @keyframes snippet, using percentages
    'prefix': 'keyframes_percentages'
    'body': """
      @keyframes $1name {
        0%   {css-prop: value; css-prop: value}
        25%  {css-prop: value; css-prop: value}
        50%  {css-prop: value; css-prop: value}
        100% {css-prop: value; css-prop: value}
      }
    """
  'keyframes_simple': # expanded version of default @keyframes snippet
    'prefix': 'keyframes_simple'
    'body': """
      @keyframes $1name {
        from {css-prop: value; css-prop: value}
        to {css-prop: value; css-prop: value}
      }
    """
  'linear_gradient': # linear gradient
    'prefix': 'linear_gradient'
    'body': 'background: linear-gradient(to ${1:direction}, ${2:color1}, ${3:color2});'
  'link_standard': # my standard settings for links
    'prefix': 'link_standard'
    'body': """
      a:link {
        text-decoration: none;
        color: rgb(64, 37, 226);
      }

      a:visited {
        color: rgb(232, 44, 219);
      }

      a:hover {
        color: red;
        font-style: italic;
      }
    """
  'margin-auto':
    'prefix': 'margin-auto'
    'body': 'margin: 0 auto;'
  'margin-four':
    'prefix': 'margin-four'
    'body': 'margin: ${1:top} ${2:right} ${3:bottom} ${4:left};'
  'margin-two':
    'prefix': 'margin-two'
    'body': 'margin: ${1:top-bottom} ${2:left-right};'
  'media-query-custom':
    'prefix': 'media-query-custom'
    'body': """
      @media screen and (max-width: ${1:800px}) {

        ${2:element} {
          $3
        }

      }
    """
  'padding_four':
    'prefix': 'padding_four'
    'body': 'padding: ${1:top} ${2:right} ${3:bottom} ${4:left};'
  'padding-two':
    'prefix': 'padding-two'
    'body': 'padding: ${1:top-bottom} ${2:left-right};'
  'placeholder-styling':
    'prefix': 'placeholder-styling'
    'body': """
      //from http://codepen.io/htmlcolorcodes/pen/xwKaNj
      //use all of this code as a single chunk, not embedded into any selectors
      ::-webkit-$1-placeholder { /* Chrome */
        color: $deep-blue;
      }
      :-ms-$1-placeholder { /* IE 10+ */
        color: $deep-blue;
      }
      ::-moz-placeholder { /* Firefox 19+ */
        color: $deep-blue;
        opacity: 1;
      }
      :-moz-placeholder { /* Firefox 4 - 18 */
        color: $deep-blue;
        opacity: 1;
      }
    """
  'pseudo-link': # marks up a piece of text like a link, even though it's not a true link.
    'prefix': 'pseudo-link'
    'body': """
      .pseudo-link {
        color: rgb(64, 37, 226);
      }

      .pseudo-link:hover {
      	color: red;
        font-style: italic;
      	cursor: pointer;
      }
    """
  'reset': # code for css reset
    'prefix': 'reset'
    'body': """
      /* http://meyerweb.com/eric/tools/css/reset/
         v2.0 | 20110126
         License: none (public domain)
      */

      html, body, div, span, applet, object, iframe,
      h1, h2, h3, h4, h5, h6, p, blockquote, pre,
      a, abbr, acronym, address, big, cite, code,
      del, dfn, em, img, ins, kbd, q, s, samp,
      small, strike, strong, sub, sup, tt, var,
      b, u, i, center,
      dl, dt, dd, ol, ul, li,
      fieldset, form, label, legend,
      table, caption, tbody, tfoot, thead, tr, th, td,
      article, aside, canvas, details, embed,
      figure, figcaption, footer, header, hgroup,
      menu, nav, output, ruby, section, summary,
      time, mark, audio, video {
      	margin: 0;
      	padding: 0;
      	border: 0;
      	font-size: 100%;
      	font: inherit;
      	vertical-align: baseline;
      }
      /* HTML5 display-role reset for older browsers */
      article, aside, details, figcaption, figure,
      footer, header, hgroup, menu, nav, section {
      	display: block;
      }
      body {
      	line-height: 1;
      }
      ol, ul {
      	list-style: none;
      }
      blockquote, q {
      	quotes: none;
      }
      blockquote:before, blockquote:after,
      q:before, q:after {
      	content: '';
      	content: none;
      }
      table {
      	border-collapse: collapse;
      	border-spacing: 0;
      }

    """
  'sanity-check':
    'prefix': 'sanity-check'
    'body': """
      background-color: magenta;
      color: magenta;
    """
  'smartphone': # media query for smartphone
    'prefix': 'smartphone'
    'body': """
      @media screen and (max-width: 500px) { /* for smartphones */
        element1 {}
        element2 {}
      }
    """
  'smartphone-and-tablet': # media query for smartphones and tablets
    'prefix': 'smartphone-and-tablet'
    'body': """
      @media screen and (max-width: 800px) { /* for smartphones and tablets */
        element1 {}
        element2 {}
      }
    """
  'tablet': #  media query for tablets
    'prefix': 'tablet'
    'body': """
      @media screen and (min-width: 501px) and (max-width: 800px) { /* for tablets */
        element1 {}
        element2 {}
      }
    """
  'text-align-center':
    'prefix': 'text-align-center'
    'body': 'text-align: center;'
  'text-replacement': # replace text with an image
    'prefix': 'text-replacement'
    'body': """
      text-indent: -9999px;
      background: url($1) no-repeat;
      height: height;
      width: width;
    """
  'vertical-alignment': # code to align element vertically
    'prefix': 'vertical-alignment'
    'body': """
      .element {
        position: relative;
        top: 50%;
        transform: translateY(-50%);
      }
    """
